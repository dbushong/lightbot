// Generated by CoffeeScript 1.6.3
(function() {
  var animate, animateTick, animating, arrow, beige, body, body_height, body_radius, bodyg, bot, bulbBot, camera, clr, def, defaults, flat_blue, flat_gray, game, gray, group, head, head_radius, headg, i, level_1_3, level_2_2, level_3_2, light, moveBotTo, moveLiftTo, pref, prev_coords, prop, renderer, rgb, row, scene, sky, square, step, stp, toggleGoal, tops, tri, turnBotTo, updateScene, wireframe, x, y, _i, _j, _k, _len, _len1, _ref, _ref1;

  level_1_3 = {
    "board": [
      [
        {}, {}, {
          "goal": true
        }
      ], [
        {
          "elev": 1
        }, {
          "elev": 1
        }, {
          "elev": 1
        }
      ], [{}, {}, {}]
    ],
    "bot": {
      "x": 0,
      "y": 2,
      "dir": 1
    },
    "prog": {
      "main": [
        {
          "action": "forward"
        }, {
          "action": "forward"
        }, {
          "action": "left"
        }, {
          "action": "jump"
        }, {
          "action": "jump"
        }, {
          "action": "bulb"
        }
      ]
    }
  };

  level_2_2 = {
    "board": [
      [
        {
          "elev": 2
        }, {}, {
          "elev": 2
        }, {
          "elev": 2
        }, {
          "elev": 2
        }
      ], [
        {
          "elev": 2
        }, {}, {
          "elev": 2
        }, {}, {
          "elev": 2
        }
      ], [
        {
          "elev": 2
        }, {
          "elev": 2
        }, {
          "elev": 2
        }, {}, {
          "elev": 2,
          "goal": true
        }
      ]
    ],
    "bot": {
      "x": 0,
      "y": 0,
      "dir": 2
    },
    "prog": {
      "main": [
        {
          "action": "p1"
        }, {
          "action": "left"
        }, {
          "action": "p1"
        }, {
          "action": "left"
        }, {
          "action": "p1"
        }, {
          "action": "right"
        }, {
          "action": "p1"
        }, {
          "action": "right"
        }, {
          "action": "p1"
        }, {
          "action": "bulb"
        }
      ],
      "p1": [
        {
          "action": "forward"
        }, {
          "action": "forward"
        }
      ]
    }
  };

  level_3_2 = {
    "board": [
      [
        {}, {
          "elev": 4,
          "goal": true
        }, {}, {
          "elev": 4,
          "goal": true
        }, {}, {
          "elev": 4,
          "goal": true
        }, {}
      ], [
        {
          "elev": 2
        }, {
          "elev": 4
        }, {
          "elev": 2,
          "goal": true
        }, {
          "elev": 4
        }, {
          "elev": 2,
          "goal": true
        }, {
          "elev": 4
        }, {
          "elev": 2,
          "goal": true
        }
      ], [
        {}, {
          "lift": true
        }, {}, {
          "lift": true
        }, {}, {
          "lift": true
        }, {}
      ]
    ],
    "bot": {
      "x": 0,
      "y": 2,
      "dir": 1
    },
    "prog": {
      "main": [
        {
          "action": "p1"
        }, {
          "action": "left"
        }, {
          "action": "p1"
        }, {
          "action": "left"
        }, {
          "action": "p1"
        }
      ],
      "p1": [
        {
          "action": "forward"
        }, {
          "action": "left"
        }, {
          "action": "bulb"
        }, {
          "action": "bulb"
        }, {
          "action": "forward"
        }, {
          "action": "forward"
        }, {
          "action": "bulb"
        }, {
          "action": "p2"
        }
      ],
      "p2": [
        {
          "action": "right"
        }, {
          "action": "right"
        }, {
          "action": "forward"
        }, {
          "action": "left"
        }, {
          "action": "jump"
        }, {
          "action": "bulb"
        }, {
          "action": "right"
        }, {
          "action": "jump"
        }
      ]
    }
  };

  rgb = function(clr) {
    return {
      green: 0x00ff00,
      red: 0xff0000,
      teal: 0x00bbbb,
      yellow: 0xffff00,
      gray: 0xcccccc,
      beige: 0xf5f5dc
    }[clr];
  };

  renderer = new THREE.WebGLRenderer({
    antialias: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

  window.camera = camera = new THREE.OrthographicCamera(-1e7, 1e7, 1e7, -1e7, -1e7, 1e7);

  scene = new THREE.Scene;

  window.updateScene = updateScene = function() {
    return renderer.render(scene, camera);
  };

  window.group = group = new THREE.Object3D;

  group.name = 'group';

  window.light = light = new THREE.PointLight(0xffffff, 1.0, 0);

  light.position.set(500, -500, 1000);

  group.add(light);

  flat_gray = new THREE.MeshLambertMaterial({
    color: rgb('gray'),
    shading: THREE.FlatShading
  });

  beige = new THREE.MeshLambertMaterial({
    color: rgb('beige'),
    shading: THREE.FlatShading
  });

  gray = new THREE.MeshLambertMaterial({
    color: rgb('gray')
  });

  flat_blue = new THREE.MeshLambertMaterial({
    color: 0x0000ff,
    shading: THREE.FlatShading
  });

  wireframe = new THREE.MeshBasicMaterial({
    wireframe: true,
    wireframeLinewidth: 2,
    color: 0x666666
  });

  sky = new THREE.Mesh(new THREE.CubeGeometry(10000, 10000, 10000), new THREE.MeshBasicMaterial({
    color: 0,
    side: THREE.BackSide
  }));

  sky.position.z = 5000;

  bot = new THREE.Object3D;

  bot.name = 'bot';

  head_radius = 40;

  body_radius = 40;

  body_height = 150;

  headg = new THREE.SphereGeometry(head_radius, 40);

  head = new THREE.Mesh(headg, new THREE.MeshLambertMaterial({
    color: rgb('gray')
  }));

  head.name = 'head';

  head.position.y = body_height / 2 + head_radius;

  bot.add(head);

  bodyg = new THREE.CylinderGeometry(body_radius, body_radius, body_height, 20);

  body = new THREE.Mesh(bodyg, gray);

  body.name = 'body';

  bot.add(body);

  tri = new THREE.Shape;

  tri.moveTo(-50, -90);

  tri.lineTo(0, 90);

  tri.lineTo(50, -90);

  tri.lineTo(-50, -90);

  arrow = new THREE.Mesh(tri.extrude({
    amount: 20
  }), flat_blue);

  arrow.name = 'arrow';

  arrow.rotation.x = Math.PI / 2;

  arrow.rotation.z = Math.PI;

  bot.add(arrow);

  bot.rotation.x = Math.PI / 2;

  group.add(bot);

  tops = [];

  step = function(x, y, height, color, lift) {
    var geom, grp, mat, plane, pole, top;
    if (height == null) {
      height = 2;
    }
    if (color == null) {
      color = null;
    }
    if (lift == null) {
      lift = false;
    }
    grp = new THREE.Object3D;
    grp.name = 'step';
    geom = new THREE.CubeGeometry(200, 200, height);
    grp.add(THREE.SceneUtils.createMultiMaterialObject(geom, [(lift ? beige : flat_gray), wireframe]));
    if (lift) {
      pole = new THREE.Mesh(new THREE.CylinderGeometry(5, 5, 400, 10), beige);
      pole.rotation.x = Math.PI / 2;
      pole.position.z = -201;
      grp.add(pole);
      if (tops[y] == null) {
        tops[y] = [];
      }
      tops[y][x] = grp;
    }
    if (color) {
      top = new THREE.Object3D;
      top.position.z = height / 2 + 1;
      geom = new THREE.PlaneGeometry(200, 200);
      mat = new THREE.MeshBasicMaterial({
        color: rgb(color)
      });
      plane = new THREE.Mesh(geom, mat);
      if (tops[y] == null) {
        tops[y] = [];
      }
      tops[y][x] = plane;
      top.add(plane);
      grp.add(top);
    }
    grp.position.x = x * 200;
    grp.position.y = -y * 200;
    return grp;
  };

  game = Lightbot.Game.load(level_3_2);

  animating = 0;

  animateTick = function() {
    if (!animating) {
      return;
    }
    requestAnimationFrame(animateTick);
    return TWEEN.update();
  };

  animate = function(obj, ms, to) {
    animating++;
    new TWEEN.Tween(obj).to(to, ms).easing(TWEEN.Easing.Quadratic.InOut).interpolation(TWEEN.Interpolation.Bezier).onUpdate(updateScene).onComplete(function() {
      return animating--;
    }).start();
    if (animating === 1) {
      return animateTick();
    }
  };

  moveBotTo = function(x, y, jump) {
    var coords, elev, from_z, to_z;
    if (jump == null) {
      jump = true;
    }
    coords = {
      x: x * 200,
      y: y * -200
    };
    elev = game.board[y][x].elev;
    to_z = body_height / 2 + 1 + elev * 100;
    from_z = bot.position.z;
    if (to_z !== from_z) {
      coords.z = jump ? [Math.max(to_z, from_z) + 100, to_z] : to_z;
    }
    return animate(bot.position, 1000, coords);
  };

  turnBotTo = function(dir) {
    return animate(bot.rotation, 1000, {
      y: (4 - dir) * Math.PI / 2
    });
  };

  moveLiftTo = function(x, y, elev) {
    var lift;
    lift = tops[y][x];
    animate(lift.position, 1000, {
      z: 1 + 100 * elev
    });
    return moveBotTo(x, y, false);
  };

  bulbBot = function() {
    var hcolor;
    hcolor = head.material.color;
    hcolor.setHex(rgb('yellow'));
    updateScene();
    return setTimeout((function() {
      hcolor.setHex(rgb('gray'));
      return updateScene();
    }), 500);
  };

  toggleGoal = function(x, y, tagged) {
    tops[y][x].material.color.setHex(rgb(tagged ? 'yellow' : 'teal'));
    return updateScene();
  };

  _ref = game.board;
  for (y = _i = 0, _len = _ref.length; _i < _len; y = ++_i) {
    row = _ref[y];
    for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
      square = row[x];
      clr = square.goal ? 'teal' : square.color;
      if (square.lift) {
        stp = step(x, y, null, clr, true);
        stp.position.z = 1 + 100 * square.elev;
        group.add(stp);
      } else {
        if (square.elev === 0) {
          stp = step(x, y, null, clr);
          stp.position.z = 1;
          group.add(stp);
        } else {
          for (i = _k = 0, _ref1 = square.elev; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
            stp = step(x, y, 100, (i === (square.elev - 1) ? clr : null));
            stp.position.z = 50 + 100 * i;
            group.add(stp);
          }
        }
      }
    }
  }

  defaults = {
    position: [-2e6, 2e6, 0],
    rotation: [-7.25, 0, -0.5],
    scale: [8200, 8200, 8200]
  };

  for (prop in defaults) {
    def = defaults[prop];
    pref = localStorage.getItem(prop);
    group[prop].fromArray(pref ? JSON.parse(pref) : def);
  }

  scene.add(group);

  moveBotTo(game.bot.x, game.bot.y);

  turnBotTo(game.bot.dir);

  prev_coords = [null, null];

  document.body.addEventListener('mousedown', function(e) {
    prev_coords[e.button] = [e.clientX, e.clientY];
    renderer.domElement.style.cursor = 'move';
    return e.preventDefault();
  });

  document.body.addEventListener('mouseup', function(e) {
    var attr, _l, _len2, _ref2, _results;
    prev_coords[e.button] = null;
    renderer.domElement.style.cursor = 'default';
    _ref2 = ['rotation', 'position', 'scale'];
    _results = [];
    for (_l = 0, _len2 = _ref2.length; _l < _len2; _l++) {
      attr = _ref2[_l];
      _results.push(localStorage.setItem(attr, JSON.stringify(group[attr].toArray())));
    }
    return _results;
  });

  document.body.addEventListener('mousemove', function(e) {
    var but, dx, dy, prev, _l, _len2, _results;
    _results = [];
    for (but = _l = 0, _len2 = prev_coords.length; _l < _len2; but = ++_l) {
      prev = prev_coords[but];
      if (!prev) {
        continue;
      }
      dx = e.clientX - prev[0];
      dy = e.clientY - prev[1];
      if (but === 0) {
        group.rotation.x += dy / 100;
        group.rotation.z += dx / 100;
      } else if (but === 1) {
        group.position.x += dx * 5000;
        group.position.y -= dy * 10000;
      }
      prev_coords[but] = [e.clientX, e.clientY];
      _results.push(updateScene());
    }
    return _results;
  });

  document.getElementById('reset').addEventListener('click', function(e) {
    for (prop in defaults) {
      def = defaults[prop];
      group[prop].fromArray(def);
      localStorage.removeItem(prop);
    }
    updateScene();
    return false;
  });

  window.addEventListener('mousewheel', function(e) {
    var factor;
    factor = e.wheelDelta / 100;
    if (factor < 0) {
      factor = Math.abs(1 / factor);
    }
    group.scale.multiplyScalar(factor);
    updateScene();
    return e.preventDefault();
  });

  game.on('bulbBot', bulbBot);

  game.on('moveBot', moveBotTo);

  game.on('turnBot', turnBotTo);

  game.on('liftMove', moveLiftTo);

  game.on('toggleGoal', toggleGoal);

  game.on('gameOver', function(reason) {
    return coords.nodeValue = "You " + reason;
  });

  setInterval((function() {
    return game.tick();
  }), 1500);

}).call(this);

/*
//@ sourceMappingURL=demo.map
*/
